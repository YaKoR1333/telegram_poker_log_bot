import datetime
import os

from asyncio import create_task, sleep

from aiogram.enums import ParseMode

import app.keyboards.group_keyboards as kb

from aiogram.exceptions import TelegramBadRequest
from aiogram import Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram import F

from app.db.requests import (
    update_session_buy_in,
    update_session_end_time,
    add_lud_session,
    get_current_lud_session,
    get_user_by_tg_id,
    add_payments,
    get_session_deposit,
    get_current_inaccuracy_session,
)

from app.filter import (
    NonPrivateTypeFilter,
    NonRegFilter,
    SessionStartFilter,
    SessionNonStartFilter,
    AdminFilter,
)

from app.lud_logic import (
    get_payments_and_debtors_data,
    is_int_more_zero,
)

from app.db.models import Payments

group_router = Router()
group_router.message.filter(
    NonPrivateTypeFilter(),
)

API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')
bot = Bot(API_TOKEN, parse_mode=ParseMode.HTML)


async def remove_keyboard_after_delay(chat_id, message_id, delay):
    """–£–¥–∞–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await sleep(delay)
    try:
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
    except TelegramBadRequest:
        pass


class CashForm(StatesGroup):
    buy_in = State()


async def debtor_mailing(debtors_data: dict) -> None:
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –ø–ª—é—Å–µ (–∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞–º) —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –¥–æ–ª–∂–Ω–∏–∫–∞—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î"""
    payments_list = []
    lud_session = await get_current_lud_session()
    for collector_id, debtor_data in debtors_data.items():
        collector = await get_user_by_tg_id(collector_id)  # FIXME —É–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–¥ –≤ —Ü–∏–∫–ª–µ
        message = "–°–µ–≥–æ–¥–Ω—è –≤—ã –º–∏—Å—Ç–µ—Ä –ø–ª—é—Å–æ–≤—ã–π!\n–í–∞—à–∏ –¥–æ–ª–∂–Ω–∏–∫–∏:\n"
        for debtor_id, debtor_cash in debtor_data.items():
            debtor = await get_user_by_tg_id(debtor_id)  # FIXME —É–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –±–¥ –≤ —Ü–∏–∫–ª–µ
            payments_list.append(
                Payments(
                    debtor_id=debtor.id,
                    collector_id=collector.id,
                    cash_received=debtor_cash,
                    lud_session_id=lud_session.id,
                )
            )
            debtor_tg_name = debtor.tg_name
            message += (
                f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{debtor_tg_name}\n"
                f"–î–æ–ª–∂–µ–Ω {debtor_cash} —Ä—É–±–ª–µ–π\n"
            )

        await bot.send_message(chat_id=collector_id, text=message)

    await add_payments(payments_list)


async def collectors_mailing(collectors_data: dict) -> None:
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –º–∏–Ω—É—Å–µ (–¥–æ–ª–∂–Ω–∏–∫–∞–º) —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º—É –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏
     –∏ –ø–æ –∫–∞–∫–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã"""
    for debtor_id, collector_data in collectors_data.items():
        message = "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!\n"
        for collector_id, collector_cash in collector_data.items():
            collector = await get_user_by_tg_id(collector_id)
            collector_tg_name, collector_requisites = collector.tg_name, collector.requisites
            message += (
                f"\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {collector_cash} —Ä—É–±–ª–µ–π\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{collector_tg_name}\n"
                f"–ü–æ —Ä–µ–∫–≤–µ–∑–∏—Ç–∞–º {collector_requisites}\n"
            )

        await bot.send_message(chat_id=debtor_id, text=message)


@group_router.message(
    CommandStart(),
    NonRegFilter(),
)
async def bot_start(message: Message) -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ gm"""
    welcome_text = "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, —è –±—É–¥—É –≤–µ—Å—Ç–∏ –ª–æ–≥–∏ –≤–∞—à–∏—Ö –∏–≥—Ä üëã\n–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n" \
                   "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n" \
                   "* –ö–Ω–æ–ø–∫–∞ –ù–∞—á–∞—Ç—å –ª—É–¥–æ-—Å–µ—Å—Å–∏—é - –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é," \
                   " –∫–Ω–æ–ø–∫–∏ rebuy –∏ cash out –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏\n\n" \
                   "–°–ª–µ–¥—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:\n\n" \
                   "* –ö–Ω–æ–ø–∫–∞ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—É–¥–æ-—Å–µ—Å—Å–∏—é - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é, –≤—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–∏–µ –∏—Ç–æ–≥–∏" \
                   " –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º—É –≤—ã –¥–æ–ª–∂–Ω—ã/–∫—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º\n\n" \
                   "* –ö–Ω–æ–ø–∫–∞ –ò–∑–º–µ–Ω–∏—Ç—å buy-in - –∏–∑–º–µ–Ω—è–µ—Ç buy in –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏\n\n" \
                   "* –ö–Ω–æ–ø–∫–∞ –¢–µ–∫—É—â–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏" \
                   " (—Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–º–∏)\n\n" \
                   "developed by @yacor123\n"
    if await get_current_lud_session() is not None:
        await message.answer(welcome_text + "—Å–µ—Å—Å–∏—è —É–∂–µ –∏–¥—ë—Ç!", reply_markup=kb.main_session_start)
    else:
        await message.answer(welcome_text, reply_markup=kb.main)


@group_router.message(
    Command("session-start"),
    NonRegFilter(),
    AdminFilter(),
    SessionNonStartFilter(),
)
@group_router.message(
    F.text.regexp(r"–ù–∞—á–∞—Ç—å –ª—É–¥–æ-—Å–µ—Å—Å–∏—é|–Ω–∞—á–∞—Ç—å –ª—É–¥–æ-—Å–µ—Å—Å–∏—é"),
    NonRegFilter(),
    AdminFilter(),
    SessionNonStartFilter(),
)
async def session_start_handler(message: Message) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º buy in"""
    buy_in, chat_id = 500, message.chat.id
    await add_lud_session(buy_in, chat_id)
    await message.reply("–õ—É–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å ü•≥ ü•≥ ü•≥", reply_markup=kb.main_session_start)


@group_router.message(
    Command("session-stop"),
    SessionStartFilter(),
    NonRegFilter(),
    AdminFilter(),
)
@group_router.message(
    F.text.regexp(r"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—É–¥–æ-—Å–µ—Å—Å–∏—é|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—É–¥–æ-—Å–µ—Å—Å–∏—é"),
    SessionStartFilter(),
    NonRegFilter(),
    AdminFilter(),
)
async def session_end_handler(message: Message) -> None:
    """–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç —Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥"""
    collectors_data, debtors_data = await get_payments_and_debtors_data()
    lud_session = await get_current_lud_session()
    cash_loss = await get_session_deposit(lud_session.id)
    await collectors_mailing(collectors_data)
    await debtor_mailing(debtors_data)
    await update_session_end_time(datetime.datetime.now())
    await message.reply(f"–õ—É–¥–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å üòû üòû üòû\n\n"
                        f"–ö—Ä–∞—Ç–∫–∏–µ –∏—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏:\n\n"
                        f"–í—Å–µ–≥–æ –±—ã–ª–æ —Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω–æ –¥–µ–Ω–µ–≥: {cash_loss}\n"
                        f"–ü–æ—Ç–µ—Ä—è–Ω–Ω–æ –¥–µ–Ω–µ–≥ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞: {lud_session.inaccuracy}",
                        reply_markup=kb.main)


@group_router.message(
    Command("change_buy_in"),
    SessionStartFilter(),
    NonRegFilter(),
    AdminFilter(),
)
@group_router.message(
    F.text.regexp(r"–ò–∑–º–µ–Ω–∏—Ç—å buy-in|–∏–∑–º–µ–Ω–∏—Ç—å buy-in"),
    SessionStartFilter(),
    NonRegFilter(),
    AdminFilter(),
)
async def new_buy_in_handler(message: Message, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–∏—Ç—å buy in —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    user_name = message.from_user.username
    message_answer = await message.reply(f"@{user_name} –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π buy_in –ª—É–¥–æ-—Å–µ—Å–∏–∏",
                                         reply_markup=kb.get_cansel_inline_button())
    create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 60))
    await state.set_state(CashForm.buy_in)


@group_router.message(
    F.text.regexp(r"–¢–µ–∫—É—â–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å|—Ç–µ–∫—É—â–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å"),
    SessionStartFilter(),
    NonRegFilter(),
    AdminFilter(),
)
async def current_inaccuracy_handler(message: Message) -> None:
    """–¢–µ–∫—É—â–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏"""
    inaccuracy = await get_current_inaccuracy_session()
    await message.reply(f"–¢–µ–∫—É—â–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏ {inaccuracy}", reply_markup=kb.main_session_start)


@group_router.message(CashForm.buy_in)
async def update_buy_in_form(message: Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è buy in —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    user_id, user_name, buy_in = message.from_user.id, message.from_user.username, message.text.strip()
    buy_in_int = await is_int_more_zero(buy_in)
    if buy_in_int:
        await state.update_data(buy_in=buy_in_int)
        await update_session_buy_in(buy_in_int)
        await message.answer(f"@{user_name} buy-in –ª—É–¥–æ-—Å–µ—Å–∏–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {buy_in_int}")
        await state.clear()
    else:
        message_answer = await message.answer(f"@{user_name} buy-in –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0",
                                              reply_markup=kb.get_cansel_inline_button())
        create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 60))
        await state.set_state(CashForm.buy_in)


@group_router.callback_query(
    F.data.casefold() == "cancel",
    NonRegFilter(),
)
async def cancel_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """Callback –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
    current_state = await state.get_state()

    if current_state is None:
        return

    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–∞")
    await callback.message.delete()
