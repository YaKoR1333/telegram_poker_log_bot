import re

import app.keyboards.pm_keyboards as kb

from asyncio import create_task

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram import F

from app.db.requests import *
from app.filter import (
    PrivateTypeFilter,
    SessionStartFilter,
    StatisticsViewingFilter,
    AdminFilter
)
from app.lud_logic import (
    is_int_more_zero,
    add_action,
    parse_log_message
)
from app.handlers.group_handlers import bot, remove_keyboard_after_delay

from app.db.models import LudActionOnSession

requisites_regex = r"^\b\d{4}(\s*|-)\d{4}(\s*|-)\d{4}(\s*|-)\d{4}\b ?(( |-) ?[–ê-—èA-z]+)?$|" \
                   r"^8\d{10} ?(( |-) ?[–ê-—èA-z]+)?$|^\+7\d{10} ?(( |-) ?[–ê-—èA-z]+)?$"

pm_router = Router()
pm_router.message.filter(PrivateTypeFilter())


class Form(StatesGroup):
    requisites = State()
    re_buy = State()
    cash_out = State()
    new_summ = State()
    tg_name = State()
    pressed_button = State()


async def get_hot_tg_name(message: Message, state: FSMContext, user_list: list) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    inline_keyboard = kb.get_cansel_inline_button_and_hot_user(user_list)
    answer_message = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —é–∑–µ—Ä–æ–≤\n–õ–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π tg name\n–ù–∞–ø—Ä–∏–º–µ—Ä: @yacor123"
    message_answer = await message.answer(answer_message,
                                          reply_markup=inline_keyboard)
    await state.set_state(Form.tg_name)
    create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))


async def get_next_inline_keyboard_after_tg_name(state: FSMContext) -> InlineKeyboardMarkup:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ tg name –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –∫–∞–∫–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ —ç—Ç–æ–≥–æ"""
    state_data = await state.get_data()
    pressed_button = state_data["pressed_button"]

    if pressed_button == "–ü—Ä–∞–≤–∞ üõÇ":
        return kb.get_cansel_inline_button_and_rights()
    else:
        return kb.get_cancel_and_action_inline_button()


async def add_action_handler(state: FSMContext,
                             action_data: dict,
                             user_bot_action: Message | CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —é–∑–µ—Ä–∞ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç"""
    state_data = await state.get_data()
    state_tg_name = await check_tg_name_state(state_data)
    message_answer = ""
    if state_tg_name:
        user = await get_user_by_tg_name(state_tg_name)
        action_data["user_id"] = user.tg_id
        message_answer += f"–ê–¥–º–∏–Ω @{action_data['user_name']} –¥–æ–±–∞–≤–∏–ª –ª–æ–≥:\n\n"
    message_answer += await add_action(action_data)
    await user_bot_action.answer(message_answer)
    await group_chat_log(message_answer)
    await state.clear()


async def check_tg_name_state(state_data: dict) -> str | None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Ñ–æ—Ä–º–µ –∫–ª—é—á tg_name"""
    try:
        tg_name = state_data["tg_name"]
        return tg_name
    except KeyError:
        return None


async def group_chat_log(message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-–≥—Ä—É–ø–ø—É —Å –ª–æ–≥–æ–º –¥–µ–π—Å—Ç–≤–∏—è (RE_BUY/CASH_OUT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = await get_current_lud_session()
    await bot.send_message(chat_id=session.chat_id, text=message)


@pm_router.message(CommandStart())
async def bot_start(message: Message) -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ pm"""
    user_id, user_name = message.from_user.id, message.from_user.username
    user = await get_user_by_tg_id(user_id)
    welcome_text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n" \
                   "* –ö–Ω–æ–ø–∫–∞ Rebuy - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–±–∞–π –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n\n" \
                   "* –ö–Ω–æ–ø–∫–∞ Cash out - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—à–µ–∫, –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É –≤–∞—Å –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã\n\n" \
                   "–ï—Å–ª–∏ –≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ —Ä–µ–±–∞–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –≤ –∫–æ–Ω—Ü–µ —É –≤–∞—Å 0 —Ñ–∏—à–µ–∫, Cash out –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å.\n" \
                   "–ï—Å–ª–∏ –≤—ã –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ —Ä–µ–±–∞–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –≤ –∫–æ–Ω—Ü–µ —É –≤–∞—Å 0 —Ñ–∏—à–µ–∫, Cash out –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û" \
                   " –ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç –≤–Ω—ë—Å –≤–∞—Å –∫–∞–∫ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.\n\n" \
                   "* –ö–Ω–æ–ø–∫–∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã - –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ —Å–µ—Å—Å–∏–∏ –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ –∑–Ω–∞–ª–∏ –∫—É–¥–∞" \
                   " –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–Ω—å–≥–∏\n\n" \
                   "* –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ–π –≥—Ä—É–ø–ø—ã.\n\n" \
                   "–ï—Å–ª–∏ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ Rebuy/Cash out –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∞–º.\n\n" \
                   "developed by @yacor123"
    if user:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º @{user_name} üëã\n\n" + welcome_text, reply_markup=kb.main)
    else:
        if user_name is None:
            await message.answer("–ó–∞–¥–∞–π—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
                                 "–ü–æ—Å–ª–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        else:
            await add_user(user_id, user_name)
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å @{user_name} üëã\n\n" + welcome_text, reply_markup=kb.main)


@pm_router.message(Form.requisites)
async def update_requisites_form(message: Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    user_id, user_name, requisites = message.from_user.id, message.from_user.username, message.text.strip()
    if re.findall(requisites_regex, requisites):
        await state.update_data(requisites=requisites)
        await update_requisites(user_id, message.text)
        answer_message = f"@{user_name} –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        await message.reply(answer_message)
        await state.clear()
    else:
        answer_message = f"@{user_name} –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ"
        message_answer = await message.reply(answer_message, reply_markup=kb.get_cansel_inline_button())
        create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 60))
        await state.set_state(Form.requisites)


@pm_router.message(Command("back"))
@pm_router.message(F.text.regexp(r"–ù–∞–∑–∞–¥|–Ω–∞–∑–∞–¥"))
async def back_main_menu_handler(message: Message) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç main –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    await message.reply("–ù–∞–∑–∞–¥", reply_markup=kb.main)


@pm_router.message(Command("requisites"))
@pm_router.message(F.text.regexp(r"–†–µ–∫–≤–∏–∑–∏—Ç—ã|—Ä–µ–∫–≤–∏–∑–∏—Ç—ã"))
async def get_requisites_kb_handler(message: Message) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    await message.reply("–†–µ–∫–≤–∏–∑–∏—Ç—ã", reply_markup=kb.requisites)


@pm_router.message(Command("change_requisites"))
@pm_router.message(F.text.regexp(r"–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã|–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"))
async def update_requisites_handler(message: Message, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"""
    await state.set_state(Form.requisites)
    message_answer = await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)\n–ü—Ä–∏–º–µ—Ä: 88005553535 - "
                                         "–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
                                         reply_markup=kb.get_cansel_inline_button())
    create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 60))


@pm_router.message(Command("get_requisites"))
@pm_router.message(F.text.regexp(r"–¢–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã|—Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"))
async def get_requisites_handler(message: Message) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"""
    user_id = message.from_user.id
    user = await get_user_by_tg_id(user_id)
    await message.reply(f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã - {user.requisites}")


@pm_router.message(
    Command("statistics"),
    StatisticsViewingFilter(),
)
@pm_router.message(
    F.text.regexp(r"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    StatisticsViewingFilter(),
)
async def get_statistics_kb_handler(message: Message) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await message.reply("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", reply_markup=kb.statistics)


@pm_router.message(
    Command("personal_statistics"),
    StatisticsViewingFilter(),
)
@pm_router.message(
    F.text.regexp(r"–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    StatisticsViewingFilter(),
)
async def get_personal_statistics_handler(message: Message) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id, user_name = message.from_user.id, message.from_user.username
    user_count_lud_session = await get_count_lud_session_for_lud(user_id)
    user_total_deposit = await get_total_deposit_for_lud(user_id)
    user_profit = await get_profit_for_lud(user_id)

    message_answer = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_name}:\n\n" \
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–¥–æ-—Å–µ—Å—Å–∏–π: {user_count_lud_session}\n\n" \
                     f"–î–µ–ø–Ω—É—Ç–æ –¥–µ–Ω–µ–≥: {user_total_deposit}\n\n" \
                     f"–ü—Ä–æ—Ñ–∏—Ç: {user_profit}\n\n"

    await message.reply(message_answer)


@pm_router.message(
    Command("overall_statistics"),
    StatisticsViewingFilter(),
)
@pm_router.message(
    F.text.regexp(r"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    StatisticsViewingFilter(),
)
async def get_overall_statistics_handler(message: Message) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã"""
    count_lud_session = await get_count_lud_session()
    total_deposit = await get_total_deposit()
    total_lost_cash = await get_total_lost_cash()

    message_answer = f"–û–±—â–∞—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—É–¥–æ–º–∞–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã:\n\n" \
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–¥–æ-—Å–µ—Å—Å–∏–π: {count_lud_session}\n\n" \
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥: {total_deposit}\n\n" \
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞: {total_lost_cash}\n\n"

    await message.reply(message_answer)


@pm_router.message(
    Command("top_statistics"),
    StatisticsViewingFilter(),
)
@pm_router.message(
    F.text.regexp(r"–¢–æ–ø –ª—É–¥–æ–≤|—Ç–æ–ø –ª—É–¥–æ–≤"),
    StatisticsViewingFilter(),
)
async def get_top_statistics_handler(message: Message) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–µ–Ω—å–≥–∞–º"""
    message_answer = ""
    top_statistics = await get_top_lud()

    for idx, (tg_name, sum_cash_received, count_sessions) in enumerate(top_statistics, start=1):
        message_answer += f"{idx}. –ò–≥—Ä–æ–∫ - @{tg_name}, –ø—Ä–æ—Ñ–∏—Ç: {sum_cash_received}, –∑–∞ –ª—É–¥–æ-—Å–µ—Å—Å–∏–π: {count_sessions}\n"

    await message.reply(message_answer)


@pm_router.callback_query(F.data.casefold() == "cancel")
async def cancel_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """Callback –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
    current_state = await state.get_state()

    if current_state is None:
        return

    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–∞")
    await callback.message.delete()


@pm_router.callback_query(F.data.casefold() == "log_re_buy")
async def log_re_buy_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """Callback –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∞ re buy"""
    user_name = callback.from_user.username
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ {LudActionOnSession.RE_BUY.value}")
    message_answer = await bot.send_message(chat_id=callback.message.chat.id,
                                            text=f"@{user_name} –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
                                            reply_markup=kb.get_cansel_inline_button_and_hot_re_buy())
    create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))
    await state.set_state(Form.re_buy)
    await callback.message.delete()


@pm_router.callback_query(F.data.casefold() == "log_cash_out")
async def log_cash_out_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """Callback –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∞ cash out"""
    user_name = callback.from_user.username
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ {LudActionOnSession.CASH_OUT.value}")
    message_answer = await bot.send_message(chat_id=callback.message.chat.id,
                                            text=f"@{user_name} –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
                                            reply_markup=kb.get_cansel_inline_button())
    create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))
    await state.set_state(Form.cash_out)
    await callback.message.delete()


@pm_router.callback_query(kb.HotReBuyCallbackFactory.filter())
async def hot_re_buy_callback(callback: CallbackQuery,
                              state: FSMContext,
                              callback_data: kb.HotReBuyCallbackFactory) -> None:
    """Callback –¥–ª—è –≥–æ—Ä—è—á–∏—Ö re buy –∫–Ω–æ–ø–æ–∫"""
    user_name, user_id = callback.from_user.username, callback.from_user.id
    re_buy = int(callback_data.value)
    await state.update_data(re_buy=re_buy)
    re_buy_data = {
        "user_name": user_name,
        "user_id": user_id,
        "amount_cash": re_buy,
        "action": LudActionOnSession.RE_BUY
    }
    await add_action_handler(state, re_buy_data, callback)
    await callback.message.delete()


@pm_router.callback_query(kb.RightsCallbackFactory.filter())
async def rights_callback(callback: CallbackQuery,
                          state: FSMContext,
                          callback_data: kb.RightsCallbackFactory,
                          ) -> None:
    """Callback –¥–ª—è –≤—ã–¥–∞—á–∏/–æ—Ç–±–æ—Ä–∞ –ø—Ä–∞–≤"""
    state_data = await state.get_data()
    field, value = callback_data.field, callback_data.value
    tg_name = state_data["tg_name"]
    await update_admin_or_statistics_viewing(tg_name=tg_name, field=field, value=value)
    await callback.answer(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{tg_name}\n–ü—Ä–∞–≤–∞: {field}\n–ó–Ω–∞—á–µ–Ω–∏–µ: {value}")
    await state.clear()
    await callback.message.delete()


@pm_router.callback_query(kb.HotUserCallbackFactory.filter())
async def hot_tg_name_callback(callback: CallbackQuery,
                               state: FSMContext,
                               callback_data: kb.HotUserCallbackFactory,
                               ) -> None:
    """Callback –¥–ª—è –≥–æ—Ä—è—á–∏—Ö tg name –∫–Ω–æ–ø–æ–∫"""
    user_name = callback.from_user.username
    tg_name = callback_data.value
    await state.update_data(tg_name=tg_name)
    keyboard = await get_next_inline_keyboard_after_tg_name(state=state)
    await callback.answer(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{tg_name}")
    await bot.send_message(chat_id=callback.message.chat.id,
                           text=f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{tg_name}\n\n@{user_name} –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–µ:",
                           reply_markup=keyboard)
    await callback.message.delete()


@pm_router.message(
    Command("rebuy"),
    SessionStartFilter(),
)
@pm_router.message(
    F.text.regexp(r"Rebuy|rebuy"),
    SessionStartFilter(),
)
async def re_buy_handler(message: Message, state: FSMContext) -> None:
    """–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π re buy"""
    user_id, user_name = message.from_user.id, message.from_user.username
    message_answer = await message.reply(f"@{user_name} –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–±–∞–π",
                                         reply_markup=kb.get_cansel_inline_button_and_hot_re_buy())
    await state.set_state(Form.re_buy)
    create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))


@pm_router.message(Form.re_buy)
async def update_re_buy_form(message: Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ re buy"""
    user_id, user_name, re_buy = message.from_user.id, message.from_user.username, message.text.strip()
    re_buy_int = await is_int_more_zero(re_buy)
    if re_buy_int:
        await state.update_data(re_buy=re_buy_int)
        re_buy_data = {
            "user_name": user_name,
            "user_id": user_id,
            "amount_cash": re_buy_int,
            "action": LudActionOnSession.RE_BUY
        }
        await add_action_handler(state, re_buy_data, message)
    else:
        message_answer = await message.answer(f"@{user_name} –†–µ–±–∞–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0",
                                              reply_markup=kb.get_cansel_inline_button())
        create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))
        await state.set_state(Form.re_buy)


@pm_router.message(Form.cash_out)
async def update_cash_out_form(message: Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ cash out"""
    user_id, user_name, cash_out = message.from_user.id, message.from_user.username, message.text.strip()
    cash_out_int = await is_int_more_zero(cash_out)
    if cash_out_int is not None:
        await state.update_data(cash_out=cash_out_int)
        cash_out_data = {
            "user_name": user_name,
            "user_id": user_id,
            "amount_cash": cash_out_int,
            "action": LudActionOnSession.CASH_OUT
        }
        await add_action_handler(state, cash_out_data, message)
    else:
        message_answer = await message.answer(f"@{user_name} Cash out –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–º 0",
                                              reply_markup=kb.get_cansel_inline_button())
        create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))
        await state.set_state(Form.cash_out)


@pm_router.message(Form.tg_name)
async def update_cash_out_form(message: Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ tg name"""
    user_name, tg_name = message.from_user.username, message.text.strip().replace("@", "")
    user = await get_user_by_tg_name(tg_name)
    if user:
        await state.update_data(tg_name=tg_name)
        keyboard = await get_next_inline_keyboard_after_tg_name(state=state)
        await message.answer(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{tg_name}\n\n@{user_name} –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–µ:", reply_markup=keyboard)
    else:
        message_answer = await message.answer(f"@{user_name} —Ç–∞–∫–æ–≥–æ tg name –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,"
                                              f" –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –ª–∏ –≤—ã –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏, –µ—Å–ª–∏ –≤–≤–æ–¥ –æ–∫–∞–∑–∞–ª—Å—è –≤–µ—Ä–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ"
                                              f" —á–µ–ª–æ–≤–µ–∫ —Å–º–µ–Ω–∏–ª tg name, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ –ø—Ä–æ–ø–∏—Å–∞—Ç—å"
                                              f" –∫–æ–º–∞–Ω–¥—É /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞, —á—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.",
                                              reply_markup=kb.get_cansel_inline_button())
        create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))
        await state.set_state(Form.tg_name)


@pm_router.message(Form.new_summ)
async def change_summ_form(message: Message, state: FSMContext) -> None:
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–π —Å—É–º–º—ã –≤ –ª–æ–≥–µ"""
    user_id, user_name, new_summ = message.from_user.id, message.from_user.username, message.text.strip()
    new_summ_int = await is_int_more_zero(new_summ)
    if new_summ_int is not None:
        state_data = await state.get_data()
        await state.update_data(change_summ=new_summ_int)
        text_message = state_data["message_text"]
        log_id, log_user_tg_name, log_action, log_summ = await parse_log_message(text_message)
        await update_row_from_log(log_id, new_summ_int)
        group_chat_log_message = f"–ê–¥–º–∏–Ω: @{user_name} –∏–∑–º–µ–Ω–∏–ª —Å—É–º–º—É {log_summ} -> {new_summ_int}\n" \
                                 f"–≤ –ª–æ–≥–µ:\n\n@{log_user_tg_name} {log_action} {log_summ}"
        message_answer = f"–°—É–º–º–∞ –ª–æ–≥–∞ ‚Ññ{log_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_summ_int}"
        await message.answer(message_answer)
        await group_chat_log(group_chat_log_message)
        await state.clear()
    else:
        message_answer = await message.answer(f"@{user_name} —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–º 0",
                                              reply_markup=kb.get_cansel_inline_button())
        create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))
        await state.set_state(Form.new_summ)


@pm_router.message(
    Command("cash_out"),
    SessionStartFilter(),
)
@pm_router.message(
    F.text.regexp(r"Cash Out|cash out"),
    SessionStartFilter(),
)
async def cash_out_handler(message: Message, state: FSMContext) -> None:
    """–í–≤–µ—Å—Ç–∏ cash out"""
    user_name, user_id = message.from_user.username, message.from_user.id
    message_answer = await message.reply(f"@{user_name} –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à cash out",
                                         reply_markup=kb.get_cansel_inline_button())
    await state.set_state(Form.cash_out)
    create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))


@pm_router.message(
    Command("admin"),
    AdminFilter(),
)
async def admin_panel_handler(message: Message) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∞"""
    user_name, user_id = message.from_user.username, message.from_user.id
    await message.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ê–¥–º–∏–Ω - @{user_name}", reply_markup=kb.admin)


@pm_router.callback_query(F.data.casefold() == "delete_log")
async def delete_log_callback(callback: CallbackQuery) -> None:
    """Callback –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å –ª–æ–≥.
    Id –ª–æ–≥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É '.' """
    message_text, user_name = callback.message.text, callback.from_user.username
    log_id, log_user_tg_name, log_action, log_summ = await parse_log_message(message_text)
    group_chat_log_message = f"–ê–¥–º–∏–Ω: @{user_name} —É–¥–∞–ª–∏–ª –ª–æ–≥:\n\n@{log_user_tg_name} {log_action} {log_summ}"
    await delete_row_from_log(int(log_id))
    await callback.answer(f"–£–¥–∞–ª—ë–Ω –ª–æ–≥ ‚Ññ{log_id}")
    await group_chat_log(group_chat_log_message)
    await callback.message.delete()


@pm_router.callback_query(F.data.casefold() == "change_summ")
async def change_summ_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """Callback –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É.
    Id –ª–æ–≥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É '.' """
    message_text = callback.message.text
    await state.update_data(message_text=message_text)
    await state.set_state(Form.new_summ)
    await callback.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ª–æ–≥–∞")
    await callback.message.delete_reply_markup()


@pm_router.message(
    Command("session_log"),
    AdminFilter(),
    SessionStartFilter(),
)
@pm_router.message(
    F.text.regexp(r"–¢–µ–∫—É—â–∏–π –ª–æ–≥ —Å–µ—Å—Å–∏–∏|—Ç–µ–∫—É—â–∏–π –ª–æ–≥ —Å–µ—Å—Å–∏–∏"),
    AdminFilter(),
    SessionStartFilter(),
)
async def session_log_handler(message: Message) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–æ–≥ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–µ –∫–Ω–æ–ø–æ–∫"""
    session_logs = await get_log_current_session_deposit()
    if session_logs is None:
        await message.reply("–í —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ....", reply_markup=kb.admin)
    else:
        for log in session_logs:
            answer_message = f"{log.id}. –ò–≥—Ä–æ–∫: @{log.tg_name}, –¥–µ–π—Å—Ç–≤–∏–µ: {log.action.value}, —Å—É–º–º–∞: {log.amount_cash}"
            message_answer = await message.answer(answer_message, reply_markup=kb.get_delete_and_change_log())
            create_task(remove_keyboard_after_delay(message_answer.chat.id, message_answer.message_id, 180))


@pm_router.message(
    Command("add_session_log"),
    AdminFilter(),
    SessionStartFilter(),
)
@pm_router.message(
    F.text.regexp(r"–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é|–¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –≤ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é"),
    AdminFilter(),
    SessionStartFilter(),
)
async def session_log_handler(message: Message, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–¥–º–∏–Ω—É tg name —Ç–æ–ø 9 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ—Å—Å–∏–π"""
    user_list = await get_count_lud_session_group_by_user_top_9()
    await state.update_data(pressed_button=message.text)
    await get_hot_tg_name(message=message, state=state, user_list=user_list)


@pm_router.message(
    Command("issue_rights"),
    AdminFilter(),
)
@pm_router.message(
    F.text.regexp(r"–ü—Ä–∞–≤–∞|–ø—Ä–∞–≤–∞"),
    AdminFilter(),
)
async def issue_rights_handler(message: Message, state: FSMContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–¥–º–∏–Ω—É tg name 9 –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    user_list = await get_new_9_users()
    await state.update_data(pressed_button=message.text)
    await get_hot_tg_name(message=message, state=state, user_list=user_list)
